import drake
import os
import subprocess
import tempfile

class Keychain():

  def __init__(self, keychain_path, keychain_password):
    self.__keychain = str(keychain_path)
    self.__keychain_password = keychain_password

  def _unlock_keychain(self):
    output = subprocess.check_output(
      ['security', 'list-keychains']).decode('utf-8').split('\n')
    found = False
    existing_keychains = []
    for keychain in output:
      # Don't want to re-add the system keychain.
      if len(keychain.strip()) > 0:
        if keychain.strip(' "') != '/Library/Keychains/System.keychain':
          existing_keychains.append(keychain.strip(' "'))
      if keychain.strip(' "') == self.__keychain:
        found = True
    if not found:
      args = ['security', 'list-keychains', '-s']
      args.extend(existing_keychains)
      args.append(self.__keychain)
      subprocess.check_call(args)
    subprocess.check_call(['security', 'unlock-keychain', '-p',
                           self.__keychain_password, self.__keychain])

  def _lock_keychain(self):
    subprocess.check_call(['security', 'lock-keychain', self.__keychain])

  def __enter__(self):
    self._unlock_keychain()

  def __exit__(self, *args):
    self._lock_keychain()


class MacBundleBuilder(drake.Builder):

  def __init__(self,
               workspace,
               scheme,
               keychain,
               keychain_password,
               code_sign_identity,
               bundle,
               dmg,
               dmg_background):
    drake.Builder.__init__(self, [workspace, keychain, dmg_background], [dmg])
    self.__workspace = (drake.Path.cwd() / workspace.path()).canonize()
    self.__scheme = scheme
    self.__keychain = (drake.Path.cwd() / keychain.path()).canonize()
    self.__keychain_password = keychain_password
    self.__code_sign_identity = code_sign_identity
    self.__dmg = (drake.Path.cwd() / dmg.path()).canonize()
    self.__bundle_name = bundle
    self.__dmg_background = \
      (drake.Path.cwd() / dmg_background.path()).canonize()

  @property
  def workspace(self):
    return self.__workspace

  @property
  def bundle_name(self):
    return self.__bundle_name

  @property
  def dmg(self):
    return self.__dmg

  @property
  def dmg_background(self):
    return self.__dmg_background

  @property
  def keychain(self):
    return self.__keychain

  @property
  def keychain_password(self):
    return self.__keychain_password

  @property
  def archive(self):
    return self.__archive
  @archive.setter
  def archive(self, value):
    self.__archive = value

  @property
  def bundle(self):
    return self._bundle
  @bundle.setter
  def bundle(self, value):
    self._bundle = value

  @property
  def derived_data(self):
    return self.__derived_data
  @derived_data.setter
  def derived_data(self, value):
    self.__derived_data = value

  @property
  def output_archive(self):
    return self.__output_archive
  @output_archive.setter
  def output_archive(self, value):
    self.__output_archive = value

  def get_folder_size(self, folder):
    total_size = os.path.getsize(folder)
    for item in os.listdir(folder):
      itempath = os.path.join(folder, item)
      if os.path.islink(itempath):
        continue
      if os.path.isfile(itempath):
        total_size += os.path.getsize(itempath)
      elif os.path.isdir(itempath):
        total_size += self.get_folder_size(itempath)
    return total_size

  def make_archive(self):
    self.cmd('build archive',
             ['xcodebuild',
              '-workspace', self.__workspace,
              '-scheme', self.__scheme,
              'archive',
              '-archivePath', self.output_archive,
              '-derivedDataPath', self.derived_data,
              '-PBXBuildsContinueAfterErrors=NO',
              'CODE_SIGN_IDENTITY=%s' % self.__code_sign_identity,
              'OTHER_CODE_SIGN_FLAGS=--verbose --keychain %s' % self.__keychain,
              'INFINIT_BUILD_DIR=%s' % str(drake.path_root()),
              '-configuration', 'release'],
              throw = True)

  def make_bundle(self):
    self.cmd('make .app bundle',
             ['xcodebuild',
              '-exportArchive',
              '-exportFormat', 'app',
              '-archivePath', self.archive,
              '-exportPath', self.bundle], throw = True)

  def check_code_signing(self):
    self.cmd('execute allowed check',
             ['spctl', '-a', '-vv', '--type', 'execute', '--no-cache',
              self.bundle], throw = True)
    self.cmd('codesign check',
             ['codesign', '--verify', '-vv', '--deep', self.bundle], throw = True)

  def generate_dmg(self, temp_dir):
    temp_dmg_file = '%s/Infinit.tmp.dmg' % temp_dir
    self.cmd('create dmg',
             ['hdiutil', 'create',
              '-srcfolder', self.bundle,
              '-fs', 'HFS+',
              '-fsargs', '-c c=64,a=16,e=16',
              '-size', '%dm' %
              int(self.get_folder_size(self.bundle) / 1000000 + 40),
              '-format', 'UDRW',
              '-volname', self.bundle_name,
              temp_dmg_file], throw = True)
    mountpoint = '%s/infinit-dmg-mount' % temp_dir
    out = subprocess.check_output(
      ['hdiutil', 'attach',
       '-readwrite',
       '-noverify',
       '-noautoopen',
       '-mountpoint', mountpoint,
       temp_dmg_file]).decode('utf-8').split('\n')[1]
    device = out.split('\t')[0].strip()
    self.cmd('add hidden background folder',
             ['mkdir', '-p', '%s/.background' % mountpoint], throw = True)
    self.cmd('copy background image to dmg',
             ['cp', self.dmg_background,
              '%s/.background/image.png' % mountpoint], throw = True)
    self.cmd('add shortcut to /Applications',
             ['ln', '-s', '/Applications',
              '%s/Applications' % mountpoint], throw = True)
    apple_script = """
    tell application "Finder"
      tell disk "%(device)s"
        open
        set current view of container window to icon view
        set toolbar visible of container window to false
        set statusbar visible of container window to false
        set the bounds of container window to {200, 100, 900, 538}
        set theViewOptions to the icon view options of container window
        set arrangement of theViewOptions to not arranged
        set icon size of theViewOptions to 150
        set background picture of theViewOptions to file ".background:image.png"
        delay 3
        set position of item "%(bundle_name)s.app" of container window to {180, 250}
        close
        open
        set position of item "Applications" of container window to {495, 250}
        close
        open
        update without registering applications
        delay 5
        eject
      end tell
    end tell
    """ % {'device': 'infinit-dmg-mount', 'bundle_name': self.bundle_name}
    self.cmd('align dmg icons',
             ['osascript', '-e', apple_script], throw = True)

    if os.path.exists(str(self.__dmg)):
      os.unlink(str(self.__dmg))
    self.cmd('compress and output dmg',
             ['hdiutil', 'convert', temp_dmg_file,
              '-format', 'UDZO',
              '-imagekey', 'zlib-level=9',
              '-o', self.__dmg], throw = True)

  def execute(self):
    with tempfile.TemporaryDirectory() as d:
      self.derived_data = '%s/derived_data' % d
      self.output_archive = '%s/%s' % (d, self.bundle_name)
      self.archive = '%s.xcarchive' % self.output_archive
      self.bundle = '%s/%s.app' % (d, self.bundle_name)
      with Keychain(self.keychain, self.keychain_password):
        self.make_archive()
      self.make_bundle()
      self.check_code_signing()
      self.generate_dmg(d)
    return True

class MacInstallBuilder(MacBundleBuilder):

  def __init__(self,
               workspace,
               scheme,
               keychain,
               keychain_password,
               code_sign_identity,
               bundle,
               dmg,
               dmg_background):
    MacBundleBuilder.__init__(self,
                              workspace,
                              scheme,
                              keychain,
                              keychain_password,
                              code_sign_identity,
                              bundle,
                              dmg,
                              dmg_background)

  def fetch_deps(self):
    self.cmd('fetch cocoapods dependencies',
             ['pod', 'install'],
             cwd = self.workspace / '..')

  def generate_dmg(self, temp_dir):
    temp_dmg_file = '%s/Infinit-Installer.tmp.dmg' % temp_dir
    self.cmd('create dmg',
             ['hdiutil', 'create',
              '-srcfolder', self.bundle,
              '-fs', 'HFS+',
              '-fsargs', '-c c=64,a=16,e=16',
              '-size', '%dm' %
              int(self.get_folder_size(self.bundle) / 1000000 + 40),
              '-format', 'UDRW',
              '-volname', self.bundle_name,
              temp_dmg_file], throw = True)
    mountpoint = '%s/infinit-installer-dmg-mount' % temp_dir
    out = subprocess.check_output(
      ['hdiutil', 'attach',
       '-readwrite',
       '-noverify',
       '-noautoopen',
       '-mountpoint', mountpoint,
       temp_dmg_file]).decode('utf-8').split('\n')[1]
    device = out.split('\t')[0].strip()
    self.cmd('add hidden background folder',
             ['mkdir', '-p', '%s/.background' % mountpoint], throw = True)
    self.cmd('copy background image to dmg',
             ['cp', self.dmg_background,
              '%s/.background/image.png' % mountpoint], throw = True)
    apple_script = """
    tell application "Finder"
      tell disk "%(device)s"
        open
        set current view of container window to icon view
        set toolbar visible of container window to false
        set statusbar visible of container window to false
        set the bounds of container window to {200, 100, 650, 550}
        set theViewOptions to the icon view options of container window
        set arrangement of theViewOptions to not arranged
        set icon size of theViewOptions to 175
        set background picture of theViewOptions to file ".background:image.png"
        delay 3
        set position of item "%(bundle_name)s.app" of container window to {225, 250}
        close
        open
        update without registering applications
        delay 5
        eject
      end tell
    end tell
    """ % {'device': 'infinit-installer-dmg-mount',
           'bundle_name': self.bundle_name}
    self.cmd('align dmg icons',
             ['osascript', '-e', apple_script], throw = True)
    if os.path.exists(str(self.dmg)):
      os.unlink(str(self.dmg))
    self.cmd('compress and output dmg',
             ['hdiutil', 'convert', temp_dmg_file,
              '-format', 'UDZO',
              '-imagekey', 'zlib-level=9',
              '-o', self.dmg], throw = True)

  def execute(self):
    self.fetch_deps()
    with tempfile.TemporaryDirectory() as d:
      self.derived_data = '%s/derived_data' % d
      self.output_archive = '%s/%s' % (d, self.bundle_name)
      self.archive = '%s.xcarchive' % self.output_archive
      self.bundle = '%s/%s.app' % (d, self.bundle_name)
      with Keychain(self.keychain, self.keychain_password):
        self.make_archive()
      self.make_bundle()
      self.check_code_signing()
      self.generate_dmg(d)
    return True

def configure():
  git = drake.git.Git('../..')
  bundle = 'Infinit'
  bundle_dmg = drake.node('%s-%s.dmg' % (bundle, git.description()))
  bundle_workspace = drake.node('Infinit.xcworkspace')
  keychain = drake.node('build_resources/AppSign.keychain')
  keychain_password = 'jEWC9Fsm5skeychain'
  code_sign_identity = 'Developer ID Application: infinit.io'
  bundle_dmg_background = drake.node('build_resources/dmg_background.png')
  bundle_builder = MacBundleBuilder(
    workspace = bundle_workspace,
    scheme = 'InfinitApplication',
    keychain = keychain,
    keychain_password = keychain_password,
    code_sign_identity = code_sign_identity,
    bundle = bundle,
    dmg = bundle_dmg,
    dmg_background = bundle_dmg_background,
  )
  installer_workspace = drake.node('installer/InfinitInstaller.xcworkspace')
  installer_dmg = \
    drake.node('%s-Installer-%s.dmg' % (bundle, git.description()))
  installer_dmg_background = drake.node('installer/background.tiff')
  install_builder = MacInstallBuilder(
    workspace = installer_workspace,
    scheme = 'InfinitInstaller',
    keychain = keychain,
    keychain_password = keychain_password,
    code_sign_identity = code_sign_identity,
    bundle = bundle,
    dmg = installer_dmg,
    dmg_background = installer_dmg_background
  )

  drake.Rule('package') << bundle_dmg
